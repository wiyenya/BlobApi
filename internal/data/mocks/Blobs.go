// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	data "BlobApi/internal/data"

	mock "github.com/stretchr/testify/mock"
)

// Blobs is an autogenerated mock type for the Blobs type
type Blobs struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *Blobs) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Blobs) Get(id int) (*data.Blob, error) {
	ret := _m.Called(id)

	var r0 *data.Blob
	if rf, ok := ret.Get(0).(func(int) *data.Blob); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*data.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlobList provides a mock function with given fields:
func (_m *Blobs) GetBlobList() ([]*data.Blob, error) {
	ret := _m.Called()

	var r0 []*data.Blob
	if rf, ok := ret.Get(0).(func() []*data.Blob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*data.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: userID, _a1
func (_m *Blobs) Insert(userID int, _a1 map[string]interface{}) (int, error) {
	ret := _m.Called(userID, _a1)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, map[string]interface{}) int); ok {
		r0 = rf(userID, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, map[string]interface{}) error); ok {
		r1 = rf(userID, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
